0 info it worked if it ends with ok
1 verbose cli [ '/Users/calvin/.nvm/versions/node/v6.10.0/bin/node',
1 verbose cli   '/Users/calvin/.nvm/versions/node/v6.10.0/bin/npm',
1 verbose cli   'publish',
1 verbose cli   '-f' ]
2 info using npm@3.10.10
3 info using node@v6.10.0
4 warn using --force I sure hope you know what you are doing.
5 verbose publish [ '.' ]
6 silly cache add args [ '.', null ]
7 verbose cache add spec .
8 silly cache add parsed spec Result {
8 silly cache add   raw: '.',
8 silly cache add   scope: null,
8 silly cache add   escapedName: null,
8 silly cache add   name: null,
8 silly cache add   rawSpec: '.',
8 silly cache add   spec: '/Volumes/Data/Projects/Personal/conditions',
8 silly cache add   type: 'directory' }
9 verbose addLocalDirectory /Users/calvin/.npm/conditions/1.0.0/package.tgz not in flight; packing
10 verbose correctMkdir /Users/calvin/.npm correctMkdir not in flight; initializing
11 info lifecycle conditions@1.0.0~prepublish: conditions@1.0.0
12 silly lifecycle conditions@1.0.0~prepublish: no script for prepublish, continuing
13 verbose tar pack [ '/Users/calvin/.npm/conditions/1.0.0/package.tgz',
13 verbose tar pack   '/Volumes/Data/Projects/Personal/conditions' ]
14 verbose tarball /Users/calvin/.npm/conditions/1.0.0/package.tgz
15 verbose folder /Volumes/Data/Projects/Personal/conditions
16 verbose addLocalTarball adding from inside cache /Users/calvin/.npm/conditions/1.0.0/package.tgz
17 verbose correctMkdir /Users/calvin/.npm correctMkdir not in flight; initializing
18 silly cache afterAdd conditions@1.0.0
19 verbose afterAdd /Users/calvin/.npm/conditions/1.0.0/package/package.json not in flight; writing
20 verbose correctMkdir /Users/calvin/.npm correctMkdir not in flight; initializing
21 verbose afterAdd /Users/calvin/.npm/conditions/1.0.0/package/package.json written
22 silly publish { name: 'conditions',
22 silly publish   version: '1.0.0',
22 silly publish   description: 'A javascript configuration engine',
22 silly publish   keywords:
22 silly publish    [ 'configuration',
22 silly publish      'config',
22 silly publish      'condition',
22 silly publish      'conditions',
22 silly publish      'expression',
22 silly publish      'expressions' ],
22 silly publish   main: 'src/index.js',
22 silly publish   bugs: { url: 'https://github.com/major-mann/conditions/issues' },
22 silly publish   scripts: { test: '(grunt test || echo Grunt not found, skipping lint check) && (node node_modules/istanbul/lib/cli.js cover node_modules/jasmine/bin/jasmine.js)' },
22 silly publish   author: { name: 'Calvin Mann', email: 'calvinmann@gmail.com' },
22 silly publish   license: 'MIT',
22 silly publish   dependencies: { escodegen: '^1.8.1', esprima: '^3.0.0', mockery: '^2.0.0' },
22 silly publish   devDependencies:
22 silly publish    { chai: '^3.5.0',
22 silly publish      'chai-as-promised': '^6.0.0',
22 silly publish      'chai-spies': '^0.7.1',
22 silly publish      eslint: '^3.11.1',
22 silly publish      grunt: '^1.0.1',
22 silly publish      'grunt-contrib-concat': '^1.0.1',
22 silly publish      'grunt-contrib-jshint': '^1.0.0',
22 silly publish      'grunt-jscs': '^3.0.1',
22 silly publish      'grunt-mocha-test': '^0.13.2',
22 silly publish      'grunt-shell': '^2.1.0',
22 silly publish      istanbul: '^0.4.5',
22 silly publish      jasmine: '^2.5.2',
22 silly publish      mocha: '^3.2.0',
22 silly publish      'mock-request': '^0.1.2' },
22 silly publish   repository:
22 silly publish    { type: 'git',
22 silly publish      url: 'git+https://github.com/major-mann/conditions.git' },
22 silly publish   readme: '# Conditions\nConditions aims to be a fully fledged configuration manager for javascript. It\'s aim is to make configuration\nflexible enough to be used in multiple situations, but allow data to be defined in a single place and referenced\nthroughout the configuration. This allows a high level of flexibility. In addition there are configuration options\nwhich make it easy to work with multiple configurations for different environments. The loading system simply skips\nfiles which do not exist, so all levels can be specified, and only the available files will be used to prepare the\nconfiguration. See the `example/` directory to see some simple examples of what is possible.\n\n## Quick start\nA convenience loader is supplied which allows `FS` and `HTTP` loading. FS loading is assumed by default, and the\ncurrent loader can be specified by specifying the appropriate protocol in the URI.\n\n`npm install conditions`\n\n`conditions(\'config/app.config\', \'http://www.example.com/config/app\', options)`\n\nThe above command will result in the following (Note: Some parts may be in parallel):\n    1. Load `./config/app.config`\n    2. Load `http://www.example.com/config/app.config`\n    3. Override `1` with `2` and return the result\n\n## Options\nThe following options are available when calling the parser:\n\n* **protectStructure** - When set to true, all property definitions in the configuration will be set\n    to non-configurable.\n* **readOnly** - When set to true, all value properties in the configuration will be set to\n    non-writable.\n* **levels** - An array used to explode filenames to load. Every file specified in the main loader function will\n    become n files (where n is the number of levels defined) and a sub extension will be added to each of the\n    filenames. If an empty string is passed, an entry with no sub extension will be generated.\n* **verbose** - When set to true, will print out full errors in the case of load files not found.\n\n## Notes on the load paths\nBy default the initial default path is a `file://` path pointing to the current working directory of the process.\n\nIf an absolute path is received, it will override this relative path. If a `URL` is supplied the domain will become\npart of the base and a `file://` URI should be used to clear the HTTP part from the base if desired (and set a new base since we always expect an absolute location.) Some examples below.\n\nTo load a file named `production` in the `config` directory found in the current working directory (`process.cwd()`),\nthen extend it with `development` and `local`, which are also found in the `config` directory.\n* `conditions(\'/config/production\', \'development\', \'local\')`\n\nTo load a file from `http://example.com/config/production`, extend it with a file from\n`http://example.com/config/production`, extend it with a file `local1` from the `config` directory,\nthen with a file `local2`, also from the `config` directory.\n\n`conditions(\'http://example.com/config/production\', \'development\', \'file:///config/local1\', \'local2\')`\n\n## Config objects\nLoaded files are parsed and processed, becoming specialized config objects. These objects have some idiosyncrasies which\na developer should be aware of.\n\nWhen assigning an object to a config object, a copy of that object (which itself is a config object) will end up\nbeing assigned to the object. i.e. `var bar = {}; configObj.foo = bar; configObj.foo === bar; // false`\n\n## Configuration file format\n\n    {\n        "string property": "foo bar",\n        num: 100,\n        bool: true,\n        // Comments inside of the config are also possible\n        regexp: /yeah/,\n        subobjects: {\n            "sure": [\'and\', \'arrays\',\'too\',\'(\', \'You can also define an array as the root\', \')\']\n        },\n        expression: this[\'string property\'] + num\n    }\n\nWrapping `{}` and `[]` are optional. An array or object will be inferred from the contents.\n\n### Supported value types\nStrings, numbers, booleans and regular expressions are supported. You can define sub objects, and\nalso arrays. You can also define expressions which can access values in the current object directly\nby name, or through the "this" value (mainly for properties whose name is not definable directly.\nFor example, a property named "foo bar" cannot be referenced directly through valid script,\nso this["foo bar"] is made available for this purpose).\n\nExpressions are also able to reference other objects in the configuration hierarchy by referencing\nthe desired objects through their id value (described below). When an expression is part of an\nextending configuration the `base` identifier can be used to access the underlying value, the\n`source` identifier can be used to access the underlying config at its root, and any objects\ndeclared with id properties will be available to the extending config expressions.\n\n### id property\nThe special id property can be used as follows to provide cross object references. The id property\nis only considered as a reference id if the name is provided without quotes. If the name has quotes,\nthe id property is considered to be a part of the configuration.\nAn id identifier is not stored directly on the resulting configuration object, but rather on the\n`prototype` so that if an id config value is defined it will still be available on the config\nobject.\n\n    {\n        id: root,\n        id: "Configuration property",\n        val: 10,\n        sub: {\n            id: sub,\n            subval: 10\n        },\n        sub2: {\n            val: root.val + sub.val\n        }\n    }\n\nAn inspection of the values on this object should produce something like:\n\n    {\n        id: "Configuration property",\n        val: 10,\n        sub: {\n            subval: 10\n        },\n        sub2: {\n            val: 20\n        }\n    }\n\nwith a prototype of:\n\n    {\n        id: "root",\n        ...\n    }\n\nNote: As you change `sub.subval`, subsequent calls to `sub2.val` will result in different values.\n\n### Real world example\nConsider the following example of server configuration. If we were using plain JSON, we would have to update multiple values (server.url, site.home and site.api) when changing, for example, the port.\n\n    server: {\n        id: server,\n        port: 8080,\n        host: \'example.com\',\n        secure: false,\n        protocol: secure ? \'https\' : \'http\',\n        url: `${protocol}://${host}:${port === 80 ? \'\' : port}/`\n    },\n\n    site: {\n        home: server.url + \'index.html\',\n        api: `${server.url}api/`\n    }\n\n## Watching for changes\nIf you wish to watch for changes on a config object, you can use\n`conditions.on(<config object>, <event name>, <event handler>)`. `on` is a shortcut for `addListener`,\nand `removeListener` is available to remove handlers from events. Any config object receives changes for the child\nobjects associated with it. These are prefixed with "`<property name>.`"\n\n## Array commands\nWhen extending an array commands may be used for manipulation of the array. Commands will only be\napplied if every item in the array is a valid command (By default, an object containing exactly\none property named `$`.).\n\nFor commands where it is appropriate, the `find` property is used for searching, and behaves as\nfollows: It will match if it matches the array value explicitly or, if it is an object and the\narray value is an object, if every property matches every property of the same name on the\narray element.\n\nThe following commands may be issues:\n* **add** - Adds the value defined in the property `value` to the end of the array.\n* **remove** - Removes a value from the array. The `find` (See above) property is used to\n    determine which element to remove.\n* **update** - Replaces an element in the array. The `find` (See above) property is used to\n    determine which element to replace.\n* **extend** - Runs the standard extend procedure on an element in the array. The `find`\n    (See above) property is used to determine which element to replace.\n* **clear** - Removed all items from the array.\n\n# Features for V2\nThese are the feature planned for version 2.\n\n* Resource saver\n* Rebuild of internals\n    * Internal config object properties with additional information (on a per property basis)\n        * Source of property (file with line and column or dynamic)\n        * Base property value (Recursive model)\n        * Other?\n    * Full usage of Proxy model\n',
22 silly publish   readmeFilename: 'readme.md',
22 silly publish   gitHead: '6eba6c1284f532e9f420ee2c2ee45e93c1296635',
22 silly publish   homepage: 'https://github.com/major-mann/conditions#readme',
22 silly publish   _id: 'conditions@1.0.0',
22 silly publish   _shasum: '6a13145761735ae5e0992f9353a6b64927c5a914',
22 silly publish   _from: '.' }
23 verbose getPublishConfig undefined
24 silly mapToRegistry name conditions
25 silly mapToRegistry using default registry
26 silly mapToRegistry registry https://registry.npmjs.org/
27 silly mapToRegistry data Result {
27 silly mapToRegistry   raw: 'conditions',
27 silly mapToRegistry   scope: null,
27 silly mapToRegistry   escapedName: 'conditions',
27 silly mapToRegistry   name: 'conditions',
27 silly mapToRegistry   rawSpec: '',
27 silly mapToRegistry   spec: 'latest',
27 silly mapToRegistry   type: 'tag' }
28 silly mapToRegistry uri https://registry.npmjs.org/conditions
29 verbose publish registryBase https://registry.npmjs.org/
30 silly publish uploading /Users/calvin/.npm/conditions/1.0.0/package.tgz
31 verbose request uri https://registry.npmjs.org/conditions
32 verbose request sending authorization for write operation
33 info attempt registry request try #1 at 1:50:21 PM
34 verbose request using bearer token for auth
35 verbose request id 18570375667b69f4
36 http request PUT https://registry.npmjs.org/conditions
37 http 403 https://registry.npmjs.org/conditions
38 verbose headers { 'content-type': 'application/json',
38 verbose headers   'cache-control': 'max-age=300',
38 verbose headers   'content-length': '95',
38 verbose headers   'accept-ranges': 'bytes',
38 verbose headers   date: 'Mon, 08 May 2017 11:50:23 GMT',
38 verbose headers   via: '1.1 varnish',
38 verbose headers   connection: 'keep-alive',
38 verbose headers   'x-served-by': 'cache-lhr6326-LHR',
38 verbose headers   'x-cache': 'MISS',
38 verbose headers   'x-cache-hits': '0',
38 verbose headers   'x-timer': 'S1494244222.077498,VS0,VE994',
38 verbose headers   vary: 'Accept-Encoding' }
39 verbose request invalidating /Users/calvin/.npm/registry.npmjs.org/conditions on PUT
40 error publish Failed PUT 403
41 verbose stack Error: "You cannot publish over the previously published version 1.0.0." : conditions
41 verbose stack     at makeError (/Users/calvin/.nvm/versions/node/v6.10.0/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:302:12)
41 verbose stack     at CachingRegistryClient.<anonymous> (/Users/calvin/.nvm/versions/node/v6.10.0/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:290:14)
41 verbose stack     at Request._callback (/Users/calvin/.nvm/versions/node/v6.10.0/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:210:14)
41 verbose stack     at Request.self.callback (/Users/calvin/.nvm/versions/node/v6.10.0/lib/node_modules/npm/node_modules/request/request.js:187:22)
41 verbose stack     at emitTwo (events.js:106:13)
41 verbose stack     at Request.emit (events.js:191:7)
41 verbose stack     at Request.<anonymous> (/Users/calvin/.nvm/versions/node/v6.10.0/lib/node_modules/npm/node_modules/request/request.js:1048:10)
41 verbose stack     at emitOne (events.js:96:13)
41 verbose stack     at Request.emit (events.js:188:7)
41 verbose stack     at IncomingMessage.<anonymous> (/Users/calvin/.nvm/versions/node/v6.10.0/lib/node_modules/npm/node_modules/request/request.js:969:12)
42 verbose statusCode 403
43 verbose pkgid conditions
44 verbose cwd /Volumes/Data/Projects/Personal/conditions
45 error Darwin 16.5.0
46 error argv "/Users/calvin/.nvm/versions/node/v6.10.0/bin/node" "/Users/calvin/.nvm/versions/node/v6.10.0/bin/npm" "publish" "-f"
47 error node v6.10.0
48 error npm  v3.10.10
49 error code E403
50 error "You cannot publish over the previously published version 1.0.0." : conditions
51 error If you need help, you may report this error at:
51 error     <https://github.com/npm/npm/issues>
52 verbose exit [ 1, true ]
